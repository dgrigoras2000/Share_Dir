#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "struct.h"

char* checkIfConnected(){

    char* isConnected = "Y";
    return isConnected;
}

// Function to parse the file and update the list
void parseFileAndUpdateList(struct Node **head)
{
    FILE *file = fopen("zombie.ini", "r");
    if (file == NULL)
    {
        printf("Error opening file.\n");
        return;
    }

    char line[256];
    int saveContent = 0; // Flag to control saving content to the list

    while (fgets(line, sizeof(line), file))
    {
        printf("Processing line: %s", line);

        if (line[0] == '[')
        {
            char *startBracket = strchr(line, '[');
            char *endBracket = strchr(line, ']');

            if (startBracket != NULL && endBracket != NULL && startBracket < endBracket)
            {
                char *contentStart = startBracket + 1;
                *endBracket = '\0';

                if (strcmp(contentStart, "gencards") == 0)
                {
                    saveContent = 1;
                    printf("Start saving content to the list.\n");
                    continue;
                }

                if (saveContent)
                {
                    // Extract unknown length text
                    size_t contentLength = endBracket - (startBracket + 1);
                    char *definedConnection = (char *)malloc((contentLength + 1) * sizeof(char));
                    strncpy(definedConnection, startBracket + strlen("["), contentLength);
                    definedConnection[contentLength] = '\0';

                    // Check if content is connected from a function
                    char *isConnected = checkIfConnected();

                    // Create a new Node
                    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
                    if (newNode != NULL)
                    {
                        // Update the node with dynamically allocated strings
                        newNode->name = (char *)malloc(contentLength + 1);
                        strncpy(newNode->name, definedConnection, contentLength);

                        newNode->status = (char *)malloc(sizeof(char));
                        strncpy(newNode->status, isConnected, sizeof(char));

                        // Add the node to the list
                        newNode->next = *head;
                        *head = newNode;

                        printf("Added to list: Name: %s, Status: %s\n", newNode->name, newNode->status);
                    }
                    else
                    {
                        printf("Memory allocation error for Node.\n");
                    }
                }
            }
        }
    }

    fclose(file);
}

// Function to print the list
void printList(struct Node *head)
{
    struct Node *current = head;
    while (current != NULL)
    {
        printf("Name: %s, Status: %s\n", current->name, current->status);
        current = current->next;
    }
}

// Function to free the memory allocated for the list
void freeList(struct Node *head)
{
    struct Node *current = head;
    while (current != NULL)
    {
        struct Node *temp = current;
        current = current->next;
        free(temp->name);
        free(temp->status);
        free(temp);
    }
}

int main()
{
    struct Node *head = NULL;

    parseFileAndUpdateList(&head);

    // Print the list
    printf("\nList contents:\n");
    printList(head);

    // Free the memory allocated for the list
    freeList(head);

    return 0;
}
