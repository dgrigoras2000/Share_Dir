I understand. If the content inside the brackets has an unknown length, you can modify the program to dynamically allocate memory for the content. Here's an updated version:

```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void parseFile(const char *filename, const char *keyword) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    char line[256];
    while (fgets(line, sizeof(line), file)) {
        char *startBracket = strchr(line, '[');
        char *endBracket = strchr(line, ']');

        while (startBracket != NULL && endBracket != NULL && startBracket < endBracket) {
            char *contentStart = startBracket + 1;
            *endBracket = '\0';

            if (strstr(contentStart, keyword) != NULL) {
                size_t contentLength = strlen(contentStart);
                char *content = malloc(contentLength + 1);

                if (content != NULL) {
                    strcpy(content, contentStart);
                    printf("Text between brackets: %s\n", content);
                    free(content);
                } else {
                    printf("Memory allocation error.\n");
                }
            }

            startBracket = strchr(endBracket + 1, '[');
            endBracket = strchr(endBracket + 1, ']');
        }
    }

    fclose(file);
}

int main() {
    const char *filename = "your_file.txt";
    const char *keyword = "gencards";

    parseFile(filename, keyword);

    return 0;
}
```

This version dynamically allocates memory for the content inside the brackets, regardless of its length. Make sure to replace "your_file.txt" with the actual name of your input file.


error: invalid conversion from ‘void*’ to ‘char*’ [-fpermissive]
                 char *content = malloc(contentLength + 1);
                                 ~~~~~~^~~~~~~~~~~~~~~~~~~
